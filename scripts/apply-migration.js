#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Fun√ß√£o para ler o arquivo de migra√ß√£o
function readMigrationFile() {
  const migrationPath = path.join(__dirname, '../src/lib/supabase/migrations/001_initial_schema.sql');
  
  try {
    return fs.readFileSync(migrationPath, 'utf8');
  } catch (error) {
    console.error('Erro ao ler arquivo de migra√ß√£o:', error);
    process.exit(1);
  }
}

// Fun√ß√£o para aplicar migra√ß√£o via Supabase CLI
async function applyMigration() {
  const migration = readMigrationFile();
  
  console.log('üöÄ Aplicando migra√ß√£o do TaskFlow AI...');
  console.log('üìã Arquivo: 001_initial_schema.sql');
  console.log('üìä Tabelas a serem criadas:');
  console.log('   - users');
  console.log('   - workspaces');
  console.log('   - projects');
  console.log('   - tasks');
  console.log('   - subtasks');
  console.log('   - entities');
  console.log('   - chat_messages');
  console.log('   - task_entities');
  console.log('   - ai_agent_logs');
  console.log('   - user_context');
  console.log('');
  
  // Verificar se o Supabase CLI est√° instalado
  const { execSync } = require('child_process');
  
  try {
    // Verificar se estamos logados no Supabase
    execSync('supabase status', { stdio: 'pipe' });
  } catch (error) {
    console.error('‚ùå Erro: Supabase CLI n√£o est√° configurado');
    console.log('');
    console.log('üìù Para configurar o Supabase CLI:');
    console.log('   1. Instale: npm install -g supabase');
    console.log('   2. Login: supabase login');
    console.log('   3. Link: supabase link --project-ref YOUR_PROJECT_REF');
    console.log('');
    process.exit(1);
  }
  
  try {
    // Aplicar migra√ß√£o
    console.log('üîÑ Aplicando migra√ß√£o...');
    execSync('supabase db push', { stdio: 'inherit' });
    
    console.log('');
    console.log('‚úÖ Migra√ß√£o aplicada com sucesso!');
    console.log('');
    console.log('üéâ Pr√≥ximos passos:');
    console.log('   1. Configure as vari√°veis de ambiente no .env.local');
    console.log('   2. Teste a conex√£o com o banco');
    console.log('   3. Execute o projeto: npm run dev');
    console.log('');
    
  } catch (error) {
    console.error('‚ùå Erro ao aplicar migra√ß√£o:', error.message);
    console.log('');
    console.log('üîß Solu√ß√µes poss√≠veis:');
    console.log('   1. Verifique se o projeto est√° linkado: supabase status');
    console.log('   2. Re-link o projeto: supabase link --project-ref YOUR_PROJECT_REF');
    console.log('   3. Verifique as permiss√µes do projeto');
    console.log('');
    process.exit(1);
  }
}

// Fun√ß√£o para mostrar instru√ß√µes manuais
function showManualInstructions() {
  console.log('üìã Instru√ß√µes Manuais para Aplicar Migra√ß√£o');
  console.log('');
  console.log('1. Acesse o Supabase Dashboard: https://supabase.com/dashboard');
  console.log('2. Selecione seu projeto');
  console.log('3. V√° para SQL Editor');
  console.log('4. Cole o conte√∫do do arquivo: src/lib/supabase/migrations/001_initial_schema.sql');
  console.log('5. Execute a query');
  console.log('');
  console.log('üìÅ Arquivo de migra√ß√£o: src/lib/supabase/migrations/001_initial_schema.sql');
  console.log('');
}

// Fun√ß√£o principal
function main() {
  const args = process.argv.slice(2);
  
  if (args.includes('--help') || args.includes('-h')) {
    console.log('üõ†Ô∏è  Script de Migra√ß√£o - TaskFlow AI');
    console.log('');
    console.log('Uso: node scripts/apply-migration.js [op√ß√µes]');
    console.log('');
    console.log('Op√ß√µes:');
    console.log('  --manual     Mostrar instru√ß√µes manuais');
    console.log('  --help, -h   Mostrar esta ajuda');
    console.log('');
    return;
  }
  
  if (args.includes('--manual')) {
    showManualInstructions();
    return;
  }
  
  // Tentar aplicar migra√ß√£o automaticamente
  applyMigration();
}

// Executar script
if (require.main === module) {
  main();
}

module.exports = {
  applyMigration,
  showManualInstructions,
  readMigrationFile
};
